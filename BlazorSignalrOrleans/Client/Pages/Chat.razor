@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IAccessTokenProvider accessTokenProvider

@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected())">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/chathub"), options =>
            {
                options.AccessTokenProvider = GetAccessTokenAsync;
            })
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task<string> GetAccessTokenAsync()
    {
        var authState = await accessTokenProvider.RequestAccessToken();
        AccessToken accessToken;
        authState.TryGetToken(out accessToken);

        if(accessToken != null)
        {
            return accessToken.Value;
        }

        return null;
    }

    void Send() {
        hubConnection.SendAsync("SendMessage", userInput, messageInput);
    }

    public bool IsConnected()
    {
        if (hubConnection == null)
        {
            return false;
        }

        return hubConnection.State == HubConnectionState.Connected;
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}